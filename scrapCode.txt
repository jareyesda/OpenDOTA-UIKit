Scrap Code

//        let image = heroIcons[indexPath.row]
//        cell?.imageView?.image = image

//        let url = "https://api.opendota.com\(iconURL)"

       // ** This method doesn't work because it only sets icons when the cell is pressed, and they are deleted when cell is deleted.
        // ~~~~~~~~~~~~~~~~
//        cell?.imageView?.image = nil
//        cell?.tag = indexPath.row
//        let task = URLSession.shared.dataTask(with: url!) { (data, response, error) in
//            guard let data = data, error == nil else { return }
//
//            DispatchQueue.main.async {
//                if cell!.tag == indexPath.row {
//                    cell?.imageView?.image = UIImage(data: data)
//                }
//            }
//        }
//        task.resume()
        
        // ** This method doesn't work because a network call is made everytime a cell is created. Therefore its too laggy
        // ~~~~~~~~~~~~~~~~
        
//        if let data = try? Data(contentsOf: url!) {
//            let heroIcon = UIImage(data: data)
//            cell?.imageView?.image = heroIcon
//        } else {
//            cell?.imageView?.image = nil
//        }//make sure your image in this url does exist, otherwise unwrap in a if let check / try-catch
        
        

//        DispatchQueue.global().async {
//            let data = try? Data(contentsOf: url!)
//            DispatchQueue.main.async {
//                if let heroIcon = UIImage(data: data!) {
//                    cell?.imageView?.image = heroIcon
//                }
//            }
//        }
        
        // This doesn't work because the app crashes when the last cell is reached/created
        // ~~~~~~~~~~~~~~~~
//        DispatchQueue.global(qos: .background).async {
//            let url = URL(string: "https://api.opendota.com\(iconURL)")
//            let data = try? Data(contentsOf: url!)
//            if let image = UIImage(data: data!) {
//                DispatchQueue.main.async {
//                    self.imageCache.setObject(image, forKey: NSString(string: self.fetchedData[indexPath.row].name))
//                    cell?.imageView?.image = image
//                }
//            } else {
//                cell?.imageView?.image = nil
//            }
//        }

//let imageCache = NSCache<NSString, UIImage>()
//extension UIImageView {
//    func loadImageUsingCache(withUrl urlString : String) {
//        let url = URL(string: urlString)
//        if url == nil {return}
//        self.image = nil
//
//        // check cached image
//        if let cachedImage = imageCache.object(forKey: urlString as NSString)  {
//            self.image = cachedImage
//            return
//        }
//
//        // if not, download image from url
//        URLSession.shared.dataTask(with: url!, completionHandler: { (data, response, error) in
//            if error != nil {
//                print(error!)
//                return
//            }
//
//            DispatchQueue.main.async {
//                if let image = UIImage(data: data!) {
//                    imageCache.setObject(image, forKey: urlString as NSString)
//                    self.image = image
//                }
//            }
//
//        }).resume()
//    }
//}